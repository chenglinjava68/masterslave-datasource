package cn.yxffcode.datasource.masterslave;

import cn.yxffcode.datasource.SQLParser;
import cn.yxffcode.datasource.SqlType;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * 带预处理的Statement实现,一个PreparedMasterslaveStatement只能是读或者写
 *
 * @author gaohang on 16/2/27.
 */
final class PreparedMasterslaveStatement extends MasterslaveStatement implements PreparedStatement {

  /**
   * 需要预处理的SQL
   */
  private final String preparingSql;

  /**
   * 预处理后的Statement
   */
  private PreparedStatementHolder preparedStatementHolder;

  /**
   * 是否是读SQL
   */
  private boolean isReadStatement;

  private final List<ResultSet> openedResultSets = new ArrayList<>(1);

  PreparedMasterslaveStatement(MasterslaveConnection masterslaveConnection, int resultSetType,
                               int resultSetConcurrency,
                               int resultSetHoldability, String preparingSql) throws SQLException {
    super(masterslaveConnection, resultSetType, resultSetConcurrency, resultSetHoldability);
    this.preparingSql = preparingSql;
    initStatementHolderDefault();
  }

  public PreparedMasterslaveStatement(MasterslaveConnection masterslaveConnection,
                                      String preparingSql)
      throws SQLException {
    super(masterslaveConnection);
    this.preparingSql = preparingSql;
    initStatementHolderDefault();
  }

  public PreparedMasterslaveStatement(MasterslaveConnection masterslaveConnection,
                                      final int autoGeneratedKeys,
                                      final String preparingSql) throws SQLException {
    super(masterslaveConnection, 0, 0, 0);
    this.preparingSql = preparingSql;
    SqlType sqlType = SQLParser.getSqlType(preparingSql);
    this.isReadStatement = sqlType.isRead();
    this.preparedStatementHolder = new AbstractPreparedStatementHolder() {
      @Override protected PreparedStatement createReadStatement() throws SQLException {
        return getMasterslaveConnection().targetConnection(true)
            .prepareStatement(preparingSql, autoGeneratedKeys);
      }

      @Override protected PreparedStatement createWriteStatement() throws SQLException {
        return getMasterslaveConnection().targetConnection(false)
            .prepareStatement(preparingSql, autoGeneratedKeys);
      }
    };
  }

  public PreparedMasterslaveStatement(MasterslaveConnection masterslaveConnection,
                                      final String preparingSql,
                                      final String[] columnNames) throws SQLException {
    super(masterslaveConnection, 0, 0, 0);
    this.preparingSql = preparingSql;
    SqlType sqlType = SQLParser.getSqlType(preparingSql);
    this.isReadStatement = sqlType.isRead();
    this.preparedStatementHolder = new AbstractPreparedStatementHolder() {
      @Override protected PreparedStatement createReadStatement() throws SQLException {
        return getMasterslaveConnection().targetConnection(true)
            .prepareStatement(preparingSql, columnNames);
      }

      @Override protected PreparedStatement createWriteStatement() throws SQLException {
        return getMasterslaveConnection().targetConnection(false)
            .prepareStatement(preparingSql, columnNames);
      }
    };
  }

  public PreparedMasterslaveStatement(MasterslaveConnection masterslaveConnection,
                                      final String preparingSql,
                                      final int[] columnIndexes) throws SQLException {
    super(masterslaveConnection, 0, 0, 0);
    this.preparingSql = preparingSql;
    SqlType sqlType = SQLParser.getSqlType(preparingSql);
    this.isReadStatement = sqlType.isRead();
    this.preparedStatementHolder = new AbstractPreparedStatementHolder() {
      @Override protected PreparedStatement createReadStatement() throws SQLException {
        return getMasterslaveConnection().targetConnection(true)
            .prepareStatement(preparingSql, columnIndexes);
      }

      @Override protected PreparedStatement createWriteStatement() throws SQLException {
        return getMasterslaveConnection().targetConnection(false)
            .prepareStatement(preparingSql, columnIndexes);
      }
    };
  }

  private void initStatementHolderDefault() throws SQLException {
    if (preparedStatementHolder == null) {
      this.preparedStatementHolder = new AbstractPreparedStatementHolder() {
        @Override protected PreparedStatement createReadStatement() throws SQLException {
          return getMasterslaveConnection().targetConnection(true).prepareStatement(preparingSql);
        }

        @Override protected PreparedStatement createWriteStatement() throws SQLException {
          return getMasterslaveConnection().targetConnection(false).prepareStatement(preparingSql);
        }
      };
      isReadStatement = SQLParser.getSqlType(preparingSql).isRead();
    }
  }

  @Override public void close() throws SQLException {
    SQLException last = null;
    try {
      super.close();
    } catch (SQLException e) {
      last = e;
    }
    for (ResultSet resultSet : openedResultSets) {
      if (!resultSet.isClosed()) {
        try {
          resultSet.close();
        } catch (SQLException e) {
          last = e;
        }
      }
    }
    try {
      preparedStatementHolder.close();
    } catch (SQLException e) {
      last = e;
    }
    if (last != null) {
      throw last;
    }
  }

  @Override public ResultSet executeQuery() throws SQLException {
    checkClosed();
    return preparedStatementHolder.detectStatement().executeQuery();
  }

  @Override public int executeUpdate() throws SQLException {
    checkClosed();
    return preparedStatementHolder.detectStatement().executeUpdate();
  }

  @Override public void setNull(int parameterIndex, int sqlType) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setNull(parameterIndex, sqlType);
  }

  @Override public void setBoolean(int parameterIndex, boolean x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBoolean(parameterIndex, x);
  }

  @Override public void setByte(int parameterIndex, byte x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setByte(parameterIndex, x);
  }

  @Override public void setShort(int parameterIndex, short x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setShort(parameterIndex, x);
  }

  @Override public void setInt(int parameterIndex, int x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setInt(parameterIndex, x);
  }

  @Override public void setLong(int parameterIndex, long x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setLong(parameterIndex, x);
  }

  @Override public void setFloat(int parameterIndex, float x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setFloat(parameterIndex, x);
  }

  @Override public void setDouble(int parameterIndex, double x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setDouble(parameterIndex, x);
  }

  @Override public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBigDecimal(parameterIndex, x);
  }

  @Override public void setString(int parameterIndex, String x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setString(parameterIndex, x);
  }

  @Override public void setBytes(int parameterIndex, byte[] x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBytes(parameterIndex, x);
  }

  @Override public void setDate(int parameterIndex, Date x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setDate(parameterIndex, x);
  }

  @Override public void setTime(int parameterIndex, Time x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setTime(parameterIndex, x);
  }

  @Override public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setTimestamp(parameterIndex, x);
  }

  @Override public void setAsciiStream(int parameterIndex, InputStream x, int length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setAsciiStream(parameterIndex, x, length);
  }

  @Override public void setUnicodeStream(int parameterIndex, InputStream x, int length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setUnicodeStream(parameterIndex, x, length);
  }

  @Override public void setBinaryStream(int parameterIndex, InputStream x, int length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBinaryStream(parameterIndex, x, length);
  }

  @Override public void clearParameters() throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().clearParameters();
  }

  @Override public void setObject(int parameterIndex, Object x, int targetSqlType)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setObject(parameterIndex, x, targetSqlType);
  }

  @Override public void setObject(int parameterIndex, Object x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setObject(parameterIndex, x);
  }

  @Override public boolean execute() throws SQLException {
    return preparedStatementHolder.detectStatement().execute();
  }

  @Override public void addBatch() throws SQLException {
    preparedStatementHolder.detectStatement().addBatch();
  }

  @Override public void setCharacterStream(int parameterIndex, Reader reader, int length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setCharacterStream(parameterIndex, reader, length);
  }

  @Override public void setRef(int parameterIndex, Ref x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setRef(parameterIndex, x);
  }

  @Override public void setBlob(int parameterIndex, Blob x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBlob(parameterIndex, x);
  }

  @Override public void setClob(int parameterIndex, Clob x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setClob(parameterIndex, x);
  }

  @Override public void setArray(int parameterIndex, Array x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setArray(parameterIndex, x);
  }

  @Override public ResultSetMetaData getMetaData() throws SQLException {
    return preparedStatementHolder.detectStatement().getMetaData();
  }

  @Override public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setDate(parameterIndex, x, cal);
  }

  @Override public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setTime(parameterIndex, x, cal);
  }

  @Override public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setTimestamp(parameterIndex, x, cal);
  }

  @Override public void setNull(int parameterIndex, int sqlType, String typeName)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setNull(parameterIndex, sqlType, typeName);
  }

  @Override public void setURL(int parameterIndex, URL x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setURL(parameterIndex, x);
  }

  @Override public ParameterMetaData getParameterMetaData() throws SQLException {
    return preparedStatementHolder.detectStatement().getParameterMetaData();
  }

  @Override public void setRowId(int parameterIndex, RowId x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setRowId(parameterIndex, x);
  }

  @Override public void setNString(int parameterIndex, String value) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setNString(parameterIndex, value);
  }

  @Override public void setNCharacterStream(int parameterIndex, Reader value, long length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setNCharacterStream(parameterIndex, value, length);
  }

  @Override public void setNClob(int parameterIndex, NClob value) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setNClob(parameterIndex, value);
  }

  @Override public void setClob(int parameterIndex, Reader reader, long length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setClob(parameterIndex, reader, length);
  }

  @Override public void setBlob(int parameterIndex, InputStream inputStream, long length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBlob(parameterIndex, inputStream, length);
  }

  @Override public void setNClob(int parameterIndex, Reader reader, long length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setNClob(parameterIndex, reader, length);
  }

  @Override public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setSQLXML(parameterIndex, xmlObject);
  }

  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement()
        .setObject(parameterIndex, x, targetSqlType, scaleOrLength);
  }

  @Override public void setAsciiStream(int parameterIndex, InputStream x, long length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setAsciiStream(parameterIndex, x, length);
  }

  @Override public void setBinaryStream(int parameterIndex, InputStream x, long length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBinaryStream(parameterIndex, x, length);
  }

  @Override public void setCharacterStream(int parameterIndex, Reader reader, long length)
      throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setCharacterStream(parameterIndex, reader, length);
  }

  @Override public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setAsciiStream(parameterIndex, x);
  }

  @Override public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBinaryStream(parameterIndex, x);
  }

  @Override public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setCharacterStream(parameterIndex, reader);
  }

  @Override public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setNCharacterStream(parameterIndex, value);
  }

  @Override public void setClob(int parameterIndex, Reader reader) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setClob(parameterIndex, reader);
  }

  @Override public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setBlob(parameterIndex, inputStream);
  }

  @Override public void setNClob(int parameterIndex, Reader reader) throws SQLException {
    checkClosed();
    preparedStatementHolder.detectStatement().setNClob(parameterIndex, reader);
  }

  /**
   * 持有PreparedStatement,用于决定使用master还是slave
   */
  interface PreparedStatementHolder {
    PreparedStatement detectStatement() throws SQLException;

    void close() throws SQLException;
  }


  private abstract class AbstractPreparedStatementHolder implements PreparedStatementHolder {
    private PreparedStatement readStatement;
    private PreparedStatement writeStatement;

    @Override public PreparedStatement detectStatement() throws SQLException {
      /*
       * 1.优先取master
       * 2.检查是否有master的连接,有则创建master statement
       * 3.没有master则取slave
       */
      if (writeStatement != null) {
        return writeStatement;
      }

      //
      MasterslaveConnection masterslaveConnection = getMasterslaveConnection();
      if (masterslaveConnection.hasWriteConnection()) {
        writeStatement = createWriteStatement();
        normalizeStatement(writeStatement);
        return writeStatement;
      }
      if (isReadStatement) {
        if (readStatement != null) {
          return readStatement;
        }
        readStatement = createReadStatement();
        normalizeStatement(readStatement);
        return readStatement;
      } else {
        writeStatement = createWriteStatement();
        normalizeStatement(writeStatement);
        return writeStatement;
      }
    }

    protected abstract PreparedStatement createReadStatement() throws SQLException;

    protected abstract PreparedStatement createWriteStatement() throws SQLException;

    @Override public void close() throws SQLException {
      SQLException last = null;
      if (readStatement != null) {
        try {
          readStatement.close();
        } catch (SQLException e) {
          last = e;
        }
      }
      if (writeStatement != null) {
        try {
          writeStatement.close();
        } catch (SQLException e) {
          last = e;
        }
      }
      if (last != null) {
        throw last;
      }
    }
  }
}
