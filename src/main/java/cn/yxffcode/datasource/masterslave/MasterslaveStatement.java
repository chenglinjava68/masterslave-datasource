package cn.yxffcode.datasource.masterslave;


import cn.yxffcode.datasource.AbstractStatement;
import cn.yxffcode.datasource.SQLParser;
import cn.yxffcode.datasource.SqlType;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * 普通的Statement的读写分离实现,可以被继承
 *
 * @author gaohang on 16/2/26.
 */
class MasterslaveStatement extends AbstractStatement {
  private final MasterslaveConnection masterslaveConnection;

  private Statement readStatement;
  private Statement writeStatement;

  private List<ResultSet> openedResultSets = new ArrayList<>(1);

  MasterslaveStatement(MasterslaveConnection masterslaveConnection, int resultSetType, int resultSetConcurrency,
                       int resultSetHoldability) {
    this.masterslaveConnection = masterslaveConnection;
    this.resultSetType = resultSetType;
    this.resultSetConcurrency = resultSetConcurrency;
    this.resultSetHoldability = resultSetHoldability;
  }

  public MasterslaveStatement(MasterslaveConnection masterslaveConnection) {
    this.masterslaveConnection = masterslaveConnection;
  }

  @Override public ResultSet executeQuery(String sql) throws SQLException {
    execute(sql);
    return currentResultSet;
  }

  private Statement detectStatement(String sql) throws SQLException {
    if (writeStatement != null) {
      return writeStatement;
    }
    SqlType sqlType = SQLParser.getSqlType(sql);
    boolean read = sqlType.isRead();
    Connection connection = masterslaveConnection.targetConnection(read);
    if (read) {
      readStatement =
          connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
      normalizeStatement(readStatement);
    } else {
      writeStatement =
          connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
      normalizeStatement(writeStatement);
    }
    return sqlType.isRead() ? readStatement : writeStatement;
  }

  protected void normalizeStatement(Statement statement) throws SQLException {
    if (queryTimeout != 0) {
      statement.setQueryTimeout(queryTimeout);
    }
    if (fetchSize != 0) {
      statement.setFetchSize(fetchSize);
    }
    if (maxRows != 0) {
      statement.setMaxRows(maxRows);
    }
  }

  @Override public int executeUpdate(String sql) throws SQLException {
    execute(sql);
    return updateCount;
  }

  @Override public boolean execute(String sql) throws SQLException {
    checkClosed();
    Statement statement = detectStatement(sql);
    boolean isResultSet = statement.execute(sql);
    afterExecute(statement, isResultSet);
    return isResultSet;
  }

  @Override public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    checkClosed();
    Statement statement = detectStatement(sql);
    boolean isResultSet = statement.execute(sql, autoGeneratedKeys);
    afterExecute(statement, isResultSet);
    return isResultSet;
  }

  private void afterExecute(Statement statement, boolean isResultSet) throws SQLException {
    if (isResultSet) {
      currentResultSet = statement.getResultSet();
      openedResultSets.add(currentResultSet);
      updateCount = 0;
    } else {
      updateCount = statement.getUpdateCount();
      currentResultSet = null;
    }
  }

  @Override public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    checkClosed();
    Statement statement = detectStatement(sql);
    boolean isResultSet = statement.execute(sql, columnIndexes);
    afterExecute(statement, isResultSet);
    return isResultSet;
  }

  @Override public boolean execute(String sql, String[] columnNames) throws SQLException {
    checkClosed();
    Statement statement = detectStatement(sql);
    boolean isResultSet = statement.execute(sql, columnNames);
    afterExecute(statement, isResultSet);
    return isResultSet;
  }

  @Override public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    execute(sql, autoGeneratedKeys);
    return updateCount;
  }

  @Override public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    execute(sql, columnIndexes);
    return updateCount;
  }

  @Override public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    return updateCount;
  }

  @Override public SQLWarning getWarnings() throws SQLException {
    if (writeStatement == null) {
      return writeStatement.getWarnings();
    }
    if (readStatement == null) {
      return readStatement.getWarnings();
    }
    return null;
  }

  @Override public void addBatch(String sql) throws SQLException {
    if (writeStatement == null) {
      writeStatement = masterslaveConnection.targetConnection(false).createStatement(resultSetType,
          resultSetConcurrency, resultSetHoldability);
      normalizeStatement(writeStatement);
    }
    writeStatement.addBatch(sql);
  }

  @Override public void clearBatch() throws SQLException {
    if (writeStatement != null) {
      writeStatement.clearBatch();
    }
  }

  @Override public int[] executeBatch() throws SQLException {
    if (writeStatement != null) {
      return writeStatement.executeBatch();
    }
    return new int[0];
  }

  @Override public Connection getConnection() throws SQLException {
    return masterslaveConnection;
  }

  @Override public void close() throws SQLException {
    closed = true;
    //先关闭ResultSet
    SQLException last = null;
    for (ResultSet openedResultSet : openedResultSets) {
      if (!openedResultSet.isClosed()) {
        try {
          openedResultSet.close();
        } catch (SQLException e) {
          last = e;
        }
      }
    }
    for (Statement statement : Arrays.asList(readStatement, writeStatement)) {
      try {
        statement.close();
      } catch (SQLException e) {
        last = e;
      }
    }
    if (last != null) {
      throw last;
    }
  }

  /* ========================================================================
   * 以下为简单支持的方法
   * ======================================================================*/
  public void clearWarnings() throws SQLException {
    checkClosed();
    if (readStatement != null) {
      readStatement.clearWarnings();
    }
    if (writeStatement != null) {
      writeStatement.clearWarnings();
    }
  }

  protected MasterslaveConnection getMasterslaveConnection() {
    return masterslaveConnection;
  }

  @Override public ResultSet getGeneratedKeys() throws SQLException {
    if (writeStatement != null) {
      return writeStatement.getGeneratedKeys();
    }
    return null;
  }

}
